****
--List all the tables in your database along with their purpose.
select * from master.train;
select * from master.station;
select * from master.employee;

select * from cancellation;
select * from passenger;
select * from seatavailability;
select * from ticket;
select * from timetable;

--Calculate the Length of Passenger Names
select pname as PassengerName,length(pname)
from passenger;

--Convert Train Names to Uppercase
select trainname as TrainName,upper(trainname) as UpperCaseTrainName
from master.train;

--Extract Year from Ticket Booking Date
select t.ticketid,p.passengerid,p.pname,extract(year from bookingdate) as YearOfBooking
from ticket t
join passenger p
on t.passengerid=p.passengerid;

--Find the gender of each passenger.
select passengerid,pname,gender from passenger;

--Find the employee of station whoes salary is >60000.
select * from master.employee 
where salary>'60000' order by salary desc;

--Aggregation
--Write a query to calculate the total number of passengers traveling on each train.
select trainid,count(passengerid) as TotalPassenger
from ticket
group by trainid;

--Find the average fare for each travel class (Sleeper, AC, General).
select class ,avg(fare) as AverageFare
from ticket
group by class;

--Retrieve the maximum and minimum fare from the ticket table.
select  max(fare) as MaxFare,min(fare)
from ticket;

--Identify the maximum salary for employees in each role to analyze pay distribution.
select designation,max(salary) as MaximumSalary
from master.employee
group by designation;

--Count the number of stations in each state to analyze regional coverage.
select state,count(stationid)
from master.station
group by state;

--Determine the total revenue generated by each train from ticket bookings.
select trainid,sum(fare) as TotalRevenue
from ticket
group by trainid
order by TotalRevenue desc;

--Find the total available seats for each train.
select trainid,sum(availableseats) as AvailableSeats,sum(bookedseats) as Bookedseats,sum(totalseats) as TotalSeats
from seatavailability
group by trainid
order by trainid;

--Joins
--Retrieve all train names along with their source station names.
select t.trainname, s.stationname as SourceStation 
from master.train t 
join master.station s on t.sourcestationid = s.stationid;

--Write a query to fetch ticket details along with passenger names for all bookings.
select t.ticketid,p.passengerid,p.pname,p.contact,t.bookingdate,t.fare
from ticket t
join passenger p
on t.passengerid=p.passengerid;

--Retrieve the list of employees and their respective station names to map employees to stations.
select e.employeeid,e.empname,s.stationid,s.stationname
from master.station s
join master.employee e
on s.stationid=e.stationid;

--Fetch train timetables along with station names to provide a comprehensive schedule.
select tt.trainid,tr.trainname,s.stationname,tt.arrivaltime,tt.departuretime
from master.train tr
join timetable tt on tr.trainid=tt.trainid
join master.station s on tt.stationid=s.stationid;

--List all canceled tickets along with passenger names and cancellation dates.
select t.ticketid,p.passengerid,p.pname,c.cancellationdate
from cancellation c
join ticket t on c.ticketid=t.ticketid
join passenger p on t.passengerid=p.passengerid;

--Identify all trains running between two specific stations (e.g., Mumbai and Delhi).
select * from master.station;

select tr.trainid,tr.trainname
from master.train tr
join master.station s1 on tr.sourcestationid=s1.stationid
join master.station s2 on tr.destinationstationid=s2.stationid
where s1.stationname='Mumbai CST' and s2.stationname='New Delhi';

--Find Employees Working at the Same Station with Different designation
select e1.employeeid as EmpID1,
       e1.empname as EmpName1,
	   e1.designation as Designation1,
	   e2.employeeid as EmpID2,
       e2.empname as EmpName2,
	   e2.designation as Designation2,
	   e1.stationid
from master.employee e1
join master.employee e2
on e1.stationid=e2.stationid
and e1.employeeid<>e2.employeeid and e1.department=e2.department;

--find the train which has same arrival time at the station

select t1.trainid as TrainID1,
       t2.trainid as TrainID2,
	   t1.arrivaltime as ArraivalTime
from timetable t1
join timetable t2
on t1.trainid<>t2.trainid
and t1.arrivaltime=t2.arrivaltime;

--Check the trains which has same Source Station 
select t1.trainid as TrainID1,t1.trainname as TrainName1,
       t2.trainid as TrainID2,t2.trainname as TrainName2,
	   t1.sourcestationid,s.stationname
from master.station s
join master.train t1 on s.stationid=t1.sourcestationid
join master.train t2
on t1.sourcestationid=t2.sourcestationid
and t1.trainid<>t2.trainid;

--Subqueries
--List trains where the total fare collected is above the average.
select avg(fare) from ticket group by trainid

select trainid from ticket 
group by trainid having sum(fare)>(select trainid,avg(fare) from ticket group by trainid)

--Identify passengers who have more than one ticket.
select passengerid from passenger group by passengerid having count(*)>1;

select pname from passenger 
where passengerid in(select passengerid from passenger group by passengerid having count(*)>1);

--Find the earliest departure time for each train.
select trainid,min(departuretime) from timetable group by trainid

select trainid,departuretime 
from timetable 
where departuretime=(select min(departuretime) from timetable t where t.trainid = timetable.trainid )


--Write a query to find the highest fare among all tickets that were canceled.

select max(fare) as HighestFare
from ticket 
where ticketid in (select ticketid from cancellation);

--Retrieve tickets where the fare is above the average fare.
select avg(fare) from ticket

select ticketid,passengerid 
from ticket where fare>(select avg(fare) from ticket)

--Write a query to identify trains where more than 50% of the seats are available for a specific date.
select trainid,totalseats,bookedseats,availableseats,journeydate as date
from seatavailability
where availableseats>(totalseats/2) ;

--Identify the passengers who traveled on the train with the highest fare.

select max(fare) from ticket

select t.ticketid,p.passengerid,p.pname,t.journeydate 
from ticket t
join passenger p
on t.passengerid=p.passengerid
where t.fare=(select max(fare) from ticket);

--Retrieve the list of station names where no employees are currently assigned.
select stationid from master.employee;
select s.stationid,s.stationname
from master.station s
where s.stationid not in (select stationid from master.employee);


--Identify trains that pass through stations located in Mumbai, Delhi, and Chennai.
select stationid,stationname from master.station where city in('Mumbai','Delhi','Chennai')

select  distinct tr.trainid,tr.trainname
from timetable t
join master.train tr on t.trainid=tr.trainid
where stationid in (select stationid from master.station where city in('Mumbai','Delhi','Chennai'));

--OVER Clause
--Rank all trains based on the total fare collected.
select trainid,sum(fare) as TotalFare,
rank() over(order by sum(fare) desc ) as Rank
from ticket
group by trainid;

--Compute the cumulative revenue for each train from ticket bookings.
select trainid,journeydate,
sum(fare) over(partition by trainid order by journeydate) as cumulative_revenue
from ticket;

--assign row number by dividing the class  
select t.*,
row_number() over(partition by class order by journeydate ) 
from ticket t;

--assign rank by dividing the class on the basis of fare 
select t.*,
rank() over(partition by class order by fare ) 
from ticket t;

-- give the Rank the employee on the basis od salary of different different department
select e.*,
rank() over(partition by department order by salary) 
from master.employee e

--Give the dense Rank the employee on the basis od salary of different different department
select e.*,
dense_rank() over(partition by department order by salary) 
from master.employee e

--Give the rank to the total fare generated by the class of train 
select tr.trainid,tk.class,sum(fare),
rank() over(partition by class order by sum(fare) )
from timetable tt
join master.train tr on tt.trainid=tr.trainid
join ticket tk on tr.trainid=tk.trainid
group by tr.trainid,tk.class;

--View
--Create a view combining train details with their seat availability.
create view TrainDetails as
select t.trainid,t.trainname,traintype,s.journeydate,s.totalseats,s.bookedseats,s.availableseats
from master.train t
join seatavailability s
on t.trainid=s.trainid;

select * from TrainDetails

--Create a view showing employee assignments at each station.
create view EmployeeStation as
select e.employeeid,e.empname,e.designation,s.city,s.state
from master.station s
join master.employee e
on s.stationid=e.stationid;

--Create a view to display the total fare earned by each train.
create view TotalFare as
select tr.trainid,tr.trainname,sum(fare)
from master.train tr
join ticket tk
on tr.trainid=tk.trainid
group by tr.trainid,tr.trainname;

--Create a view showing the travel history of each passenger.
create view TravelHistory as
select p.passengerid,p.pname,t.trainid,t.journeydate
from ticket t
join passenger p
on t.passengerid=p.passengerid;

--Create a view to display details of all canceled tickets along with passenger names.
create view CancelaltionTickets as
select c.cancellationid,t.ticketid,t.trainid,c.cancellationdate,c.refundamount
from ticket t
join cancellation c
on t.ticketid=c.ticketid;

--Create view to include source station names with totalrevenue.
create view TrainRevenue as 
select t.trainid, s.stationname as SourceStation, sum(fare) as TotalRevenue 
from ticket t 
join master.train tr on t.trainid = tr.trainid 
join master.station s on tr.sourcestationid = s.stationid 
group by t.trainid, s.stationname;

SELECT * FROM TrainRevenue WHERE TotalRevenue > 20000;


--Indexing
--Index on Passenger.ContactNumber for Faster Searches
create index idx_Passenger on passenger(contact);
select * 
from passenger
where contact='7666971534';

--Index on StationName for Quick Station Lookups
create index idx_station on master.station(stationname);
select * 
from master.station
where stationname='New Delhi';

--Index on SeatAvailability.AvailableSeats for Alerts
--Purpose: Quickly identify trains with limited available seats.
create index idx_availableseats on seatavailability(availableseats);
select *
from seatavailability
where availableseats>10 and journeydate='2024-12-27';

--Index on Timetable.StationID for Quick Schedule Access
--Purpose: Speed up timetable queries for specific stations.
create index idx_stationid on timetable(stationid);
select *
from timetable
where stationid=10;

--Index on Ticket.TicketID
--Purpose: Make ticket searches by TicketID faster.
create index idx_ticket on ticket(ticketid);
select *
from ticket
where ticketid=56;


-----------------------------------------------------
--Find the total fare collected for each train
select tr.trainid,tr.trainname,sum(fare) as TotalAmt
from ticket tk
join master.train tr
on tk.trainid=tr.trainid
group by tr.trainid,tr.trainname
order by TotalAmt desc;

--Count the number of passengers for each gender
select gender,count(*) as Total from passenger
group by gender;

--Retrieve details of passengers along with their train name
select p.passengerid,p.pname,t.trainid,t.trainname
from passenger p
join master.train t
on p.trainid=t.trainid;

--Find employees working at stations in a specific state:
select e.employeeid,e.empname
from master.employee e
join master.station s
on e.stationid=s.stationid
where state='Maharashtra';

--Find passengers who have booked tickets on the train with the highest total fare
select passengerid,pname from passenger 
where 
trainid=(select trainid
from ticket group by trainid
order by sum(fare) desc limit 1);

--Find employees who work at stations with more than 5 trains passing through

select employeeid,empname
from master.employee
where stationid in(
select stationid
from timetable
group by stationid
having count(trainid)>5
);


--Write a query to fetch all trains departing from a specific station.
select trainid, trainname
from master.train 
where sourcestationid=1;

--List all employees working at a particular station.
select e.employeeid,e.empname,e.designation
from master.station s
join master.employee e
on s.stationid=e.stationid
where stationname='Mumbai CST';

--Retrieve passenger details for a specific train on a given journey date.
select p.passengerid,p.pname,p.gender
from passenger p
join ticket t on p.passengerid=t.passengerid
join master.train mt on mt.trainid=t.trainid
where mt.trainname='Shatabdi Express' and journeydate='2024-12-12';

--Update the contact number of a passenger in the Passenger table.
update passenger set contact='7666971534' where passengerid=1;
select * from passenger;

--Operational Queries
--Find the total number of passengers traveling on each train for a specific day.
select t.trainid,t.trainname,count(tk.passengerid)
from master.train t
join ticket tk
on t.trainid=tk.trainid
where tk.journeydate='2024-12-18'
group by t.trainid,t.trainname;

--Identify which trains have seat availability for a given date and class.
select * from seatavailability;

select t.trainid,t.trainname,count(availableseats)
from master.train t
join seatavailability sa
on t.trainid=sa.trainid
where journeydate='2024-12-25' and class='Sleeper'
group by t.trainid,t.trainname;

--List all tickets that were booked but later canceled.
select *
from ticket t
join cancellation c
on t.ticketid=c.ticketid
where c.cancellationdate is not null;

--Revenue Insights
--Calculate the total revenue generated by each train based on ticket fares.
select tr.trainid,tr.trainname,sum(tk.fare) as TotalAmount
from master.train tr
join ticket tk
on tr.trainid=tk.trainid
group by tr.trainid,tr.trainname;

--Write a query to find the average ticket fare for each class (e.g., Sleeper, AC).
select class,avg(fare)
from ticket 
group by class;

--Passenger Analysis
--Identify the age group (e.g., <18, 18-60, >60) of passengers who travel the most.
select age ,count(passengerid) as TotalCountForAge from passenger group by age;

--Retrieve the most common source and destination station pair from ticket data.
select src.stationname as SourceStation,
       dest.stationname as DestinationStation,
	   count(*) as paircount
from ticket tk
join master.train t on tk.trainid=t.trainid
join master.station src on t.sourcestationID=src.stationid
join master.station dest on t.destinationstationID=dest.stationid
group by src.Stationname,dest.Stationname
order by paircount desc;

--retrive the train names which run daily.
select trainid, trainname,traintype from master.train 
where runningdays='Daily';


--Train Scheduling
--Determine which train has the busiest schedule based on its timetable.
select tr.trainid,tr.trainname,count(tt.stationid) as No_Of_Stops
from timetable tt
join master.train tr
on tt.trainid=tr.trainid
group by tr.trainid,tr.trainname;

--Write a query to identify overlapping schedules for a station to prevent platform conflicts.
select t1.stationid,
       s.stationname,
	   t1.trainid as Train1ID,
	   t2.trainid as Train2ID,
	   t1.platformnumber,
	   t1.arrivaltime as Train1ArrivalTime,
	   t1.departuretime as Train1DepartureTime,
	   t2.arrivaltime as Train2ArrivalTime,
	   t2.departuretime as Train2DepartureTime
	   
from timetable t1
join timetable t2
on t1.trainid<t2.trainid and t1.stationid=t2.stationid and t1.platformnumber=t2.platformnumber
   and (
       (t1.arrivaltime between t2.arrivaltime and t2.departuretime)or
       (t1.departuretime between t2.arrivaltime and t2.departuretime)or
	   (t2.arrivaltime between t1.arrivaltime and t1.departuretime)
	   )
join master.station s
on t1.stationid=s.stationid;




